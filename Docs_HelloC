## Binary Operators [bitwise operations] & [Betty Source code formating Style Guidelines ]##
# Hints:
Decimal to Binary Conversion

DECIMAL=9
BASE=2
dc -e "$DECIMAL $BASE op"

OR 

D2B=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})
echo ${D2B[$DECIMAL]}

Binary to Decimal Conversion
BINARY=00000101
echo "$((2#$BINARY))"

#5   0 0 0 0 0 1 0 1
#9   0 0 0 0 1 0 0 1
--------------------
&    0 0 0 0 0 0 0 1  -- similar to multiplication e.g. (1x1=1, 1x0=0,0x0=0) - AND

#5   0 0 0 0 0 1 0 1
#9   0 0 0 0 1 0 0 1
--------------------
|    0 0 0 0 1 1 0 1  -- similar to summation e.g. (1+1=1, 1+0=1,0+0=0) - OR

#5   0 0 0 0 0 1 0 1
--------------------
<<   0 0 0 0 1 0 1 0  -- similar to multiplying by the power of 2. # Add a zero to the right end and delete the far left digit regardeless of whether (0 or 1)
# results to 5x2=10

#5   0 0 0 0 0 1 0 1
--------------------
>>   0 0 0 0 0 0 1 0  -- similar to dividing by 2. # Add a zero to the left end and delete the far right digit regardeless of whether (0 or 1)
#results to 5/2=2

### Affectations usage
*filename = hello.c*
...
        int sum=0;
        int value = 5;
         sum = value<<1;

        printf("The result is %d\n",sum); // 10
        sum = value>>1;
        printf("The result is %d\n",sum); // 2
        
         value>>=1; //Division 5/2 = 2
        printf("The result is %d\n",value);
         value<<=1; //Multiplication 5*2 = 10
        printf("The result is %d\n",value);
        


## Betty C-SourceCode Formatting Style.
1. Separate paragraph functions with a single blank line
2. Use Tab indentation and not [4-spaces] indentation.
3. use c89 commenting method as exemplified below
// Illegal comments.
int a; /* comments */
/**
*
* Multiline comments should have a single space succeeding the '*' character
* Second line
*/
 4. The following prototypes and definitions must be included within a header file.
        a. c-function prototypes
        b. Structs
        c. Enums
        d. Typedefs
        e. Unions
 5. How to document functions
 /**
  * function_name - Short descriptions - single line
  * @param1: Short Description
  * @param2: Short Description
 (* a blank line
  * Description: Longer description of the function )?
 (* section header: Section Description)*
  * Example:
  *     function_name(90, 8); --> 98
  * Return: Description of the returned value
  */
  
  /**
   * is_positive - Check if a number is greater than 0
   * @nb: The number to be checked
   * 
   * Return: 1 if the number is positive. 0 otherwise
   */
   int is_positive(int nb)
   {
        return (nb > 0);
   }
6. Documentation of Data Structures

