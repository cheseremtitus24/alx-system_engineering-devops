## Supported Variable types in bash #N/B When assigning variables " myvar="hello" is correct noting that no spaces are allowed in between"
1. String
2. Interger
3. Contants
4. Arrays

### Creating **Local Variables**
MYVAR="hello"
MYVAR=2
MYVAR=$USER
MYVAR=[1,2,3,4]
unset MYVAR # destroys the assignment and frees memory usage

### Creating Environment/Global Variables
export hello="World"
bash # This subshell can still access the set variable but cannot change it for the parent shell 
echo $hello
export hello="To local Community"
echo $hello 
exit #exits the subshell and returns to parent shell
echo $hello # will print the original text "World" instead of the "To local Community"

### Reserved Bash Variables
PS1 - The primary prompt string
BASH - path to bash binary file
BASH_ENV - set this in order for scripts to use a custom bash path for startup before executing the rest of the commands
BASH_VERSION
EUID  - similar to id -i
UID - similar to id -i
GROUPS - similar to id -g
HOSTTYPE - machine architecture x86 | x86_64
OSTYPE - linux-gnue
MACHTYPE - x86_64-pc-linux-gnu
HISTCMD - history command id of current cmd

## Use these to constrain a session
$LINENO - lines of executed commands in an active shell -- Limit the commands executed in a shell
PPID - the shell's parent process . Kill the current shell using : kill $PPID - kill the shell when quota number of $LINENO is reached
SECONDS - use this to check the total active time of the current shell - e.g limit shell usage to a max of i.e 800 seconds before closing it.
SHLVL - tracks the number of cumulative parent and subshells created. You can utilize this to limit the number of subshells to create exceeded ones and killed.
TMOUT - if set to a value greater than 0 and no user input is received within that specified time. The Shell with self terminate.
RANDOM - reference this in a script to generate random numbers between 0 and 32767

$! - expands to PID of the recently backgrounded program
$? - expands to the Exit status of rececently executed foreground pipeline
$0 - expands to Name of the shell or script
$# - Number of Positional parameters
$_ - contains the absolute file name of the script being executed as passed in the argument list
$$ - expands to the process id of the shell. *This you can use to kill all the backgrounded processes from a different shell*


#### Aliases
alias p="pwd"; l='ls -al'  # Creates two aliases in one command

Systemwide aliases are written to the /etc/bash.bashrc file
user-specific aliases are written to the $HOME/.bashrc file

unalias p;l

# Global/Environment & Local Variables in BASH
global or environment variables are accessible in all shells.
*env & printenv* are used to display these global variables.

export MYGLOBVAR="World" #**creates a global variable**
HELLO=33 #**Creates a Local variable**

To display all Local variables you'd use the following command
diff set.sorted printenv.sorted


** RESERVED VARIABLES ** - are similar to reserved words in languages such as c. These variables variables are sometimes set by default. The variables also have the
characteristic of being assignable. 
e.g. 
PS1="customprompt> "


** SPECIAL PARAMETERS ** - These are readonly variables that are assigned dynamically by the shell. e.g $# , $?, $$
---Script name myscript.sh


#!/bin/bash
echo $1 $2 $3 $4
# echo -e -> enables echo to interpret backslash characters such as \n, \t, \r and so on.
echo -e "#The number of input parameters are \n $#";
echo -e "#The name of the script is \n $0";
echo -e "#The exit status of this file's execution is \n $?";
echo -e "#The individual parameter values are \n ($*)";
echo -e "#The individual parameter values are \n ($@)";
echo -e "#The set input options are \n $-";
echo -e "#The process ID of current shell is \n $$";
printf '#Executing file $(which ls) 1>/dev/null\n';
file $(which ls) 1>/dev/null
echo -e "#Full script path of the last command args param is \n ( $_)";
printf '#Executing watch ls -al & \n';
watch ls -al &
echo -e " Process id of the backgrounded process is \n $!";
printf 'Killing the process using kill $! \n';
kill $!
echo "the killing exit status is $?"



-- Executing the script after saving the above contents within myscript.sh

chmod +x myscript.sh
./myscript.sh

## Base Number Conversions

#!/bin/bash

binarynumber=1010;
echo $((2#$binarynumber))
hex=A; # equivalent to 10#10
echo $((16#$hex)) # on conversion it output 10
decimal=10;
echo 10 decimal to hex conversion is $((16#$decimal))
decimal=16;
echo 16 decimal to hex conversion is $((16#$decimal))
decimal=16;
echo 16 decimal to binary conversion is $((2#$decimal))






